#!/usr/bin/env ruby

require 'sshy'
require 'terminal-table'
require 'io/console'

# comment when release
# require 'bundler/setup'
# Bundler.setup
# require_relative '../lib/sshy'


# puts Sshy::VERSION
HIDE_CURSOR = "/usr/bin/tput civis"
SHOW_CURSOR = "/usr/bin/tput cnorm"

_table_size = [3, 3]
_x_y = [0, 0]

# TODO: check windows size >= ?
def winsize
  IO.console.winsize
rescue LoadError
  [Integer(`tput li`), Integer(`tput co`)]
end

def get_hosts
  hosts = []
  f = File.open("#{Dir.home}/.ssh/config", "r")
  f.each_line do |line|
    if /^Host\s/.match(line)
      hosts << line.split(' ').last
    end
  end
  f.close

  hosts.sort!
end

def formattd_output(rows)
  table = Terminal::Table.new :rows => rows
  table.style = {:width => 100, :border_x => " ", :border_i => " ", :border_y => " "}
  return table
end

def read_char
  STDIN.echo = false
  STDIN.raw!

  input = STDIN.getc.chr
  if input == "\e" then
    input << STDIN.read_nonblock(3) rescue nil
    input << STDIN.read_nonblock(2) rescue nil
  end
ensure
  STDIN.echo = true
  STDIN.cooked!

  return input
end


system(HIDE_CURSOR) # hide cursor

begin
  hosts = get_hosts
  data = Sshy::Data.new hosts

  arrow_key = ''
  while true do
    data.move(arrow_key)
    table = formattd_output(data.output)

    # refresh new output
    puts table

    # read input
    char = read_char
    if char == 'q' or char == "\u0003" # Ctrl-C
      exit
    end
    case char
    when "\r"
      # open ssh
      location = data.location
      pid = Process.fork
      if pid.nil? then
        command = "open ssh://#{data.data[location[1]][location[0]]}"
        puts "`#{command}`" + ' now'
        exec command
      else
        Process.detach(pid)
        puts "exit"
      end
      #Process.wait pid
      exit
    when "\e[A", "\u0010", 'k' # UP, CTRL-P, k
      arrow_key = 'up'
    when "\e[B", "\u000E", 'j' # DOWN, CTRL-N, j
      arrow_key = 'down'
    when "\e[C", "\u0006", 'l' # RIGHT, CTRL-F, l
      arrow_key = 'right'
    when "\e[D", "\u0002", 'h' # LEFT, CTRL-B, h
      arrow_key = 'left'
    end

    # clear old output
    (data.length + 2).times do
      system('/usr/bin/tput cuu1')
      system('/usr/bin/tput el')
    end
  end
rescue Interrupt
  exit
ensure
  system(SHOW_CURSOR) # show cursor
end
